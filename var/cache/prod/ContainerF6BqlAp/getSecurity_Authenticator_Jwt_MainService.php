<?php

namespace ContainerF6BqlAp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_Jwt_MainService extends App_KernelProdContainer
{
    /*
     * Gets the private 'security.authenticator.jwt.main' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['lexik_jwt_authentication.jwt_manager'] ?? $container->load('getLexikJwtAuthentication_JwtManagerService'));

        if (isset($container->privates['security.authenticator.jwt.main'])) {
            return $container->privates['security.authenticator.jwt.main'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['security.authenticator.jwt.main'])) {
            return $container->privates['security.authenticator.jwt.main'];
        }
        $c = ($container->privates['App\\Config\\Security\\UserProvider'] ?? $container->load('getUserProviderService'));

        if (isset($container->privates['security.authenticator.jwt.main'])) {
            return $container->privates['security.authenticator.jwt.main'];
        }

        return $container->privates['security.authenticator.jwt.main'] = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator($a, $b, new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor([new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor('Bearer', 'Authorization')]), $c, ($container->services['translator'] ?? self::getTranslatorService($container)));
    }
}
