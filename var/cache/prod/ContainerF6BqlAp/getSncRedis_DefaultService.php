<?php

namespace ContainerF6BqlAp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSncRedis_DefaultService extends App_KernelProdContainer
{
    /*
     * Gets the private 'snc_redis.default' shared service.
     *
     * @return \Redis
     */
    public static function do($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['snc_redis.default'] = $container->createProxy('RedisProxy10458bd', static fn () => \RedisProxy10458bd::createLazyProxy(static fn () => self::do($container, false)));
        }

        $a = new \Monolog\Logger('snc_redis');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return (new \Snc\RedisBundle\Factory\PhpredisClientFactory(new \Snc\RedisBundle\Logger\RedisCallInterceptor(new \Snc\RedisBundle\Logger\RedisLogger($a), NULL), NULL))->create('Redis', ['redis://127.0.0.1:6379'], ['connection_async' => false, 'connection_persistent' => false, 'connection_timeout' => 5, 'read_write_timeout' => NULL, 'iterable_multibulk' => false, 'throw_errors' => true, 'serialization' => 'default', 'cluster' => NULL, 'prefix' => NULL, 'service' => NULL], 'default', false);
    }
}
