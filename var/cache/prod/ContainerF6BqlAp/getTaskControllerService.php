<?php

namespace ContainerF6BqlAp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getTaskControllerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'App\Controller\TaskController' shared autowired service.
     *
     * @return \App\Controller\TaskController
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));
        $b = ($container->privates['App\\Service\\Impl\\UserServiceImpl'] ?? $container->load('getUserServiceImplService'));

        $container->services['App\\Controller\\TaskController'] = $instance = new \App\Controller\TaskController(new \App\Service\Impl\TaskServiceImpl($a, new \App\Service\Impl\StatusServiceImpl($a), $b, ($container->privates['App\\Repository\\TaskRepository'] ?? $container->load('getTaskRepositoryService'))), ($container->privates['App\\Service\\Impl\\CacheServiceImpl'] ?? $container->load('getCacheServiceImplService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')), $b, ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

        $instance->setContainer(($container->privates['.service_locator.O2p6Lk7'] ?? $container->load('get_ServiceLocator_O2p6Lk7Service'))->withContext('App\\Controller\\TaskController', $container));

        return $instance;
    }
}
