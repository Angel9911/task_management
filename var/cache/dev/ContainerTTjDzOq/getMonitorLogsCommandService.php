<?php

namespace ContainerTTjDzOq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMonitorLogsCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Command\MonitorLogsCommand' shared autowired service.
     *
     * @return \App\Command\MonitorLogsCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'console'.\DIRECTORY_SEPARATOR.'Command'.\DIRECTORY_SEPARATOR.'Command.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Command'.\DIRECTORY_SEPARATOR.'MonitorLogsCommand.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'private_lib'.\DIRECTORY_SEPARATOR.'websockets'.\DIRECTORY_SEPARATOR.'ReaderLogFiles.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'private_lib'.\DIRECTORY_SEPARATOR.'websockets'.\DIRECTORY_SEPARATOR.'MercurePublisher.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'private_lib'.\DIRECTORY_SEPARATOR.'websockets'.\DIRECTORY_SEPARATOR.'MercurePublisherImpl.php';

        $container->privates['App\\Command\\MonitorLogsCommand'] = $instance = new \App\Command\MonitorLogsCommand(new \App\private_lib\websockets\ReaderLogFiles(($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), new \App\private_lib\websockets\MercurePublisherImpl(($container->privates['mercure.hub.default.traceable'] ?? self::getMercure_Hub_Default_TraceableService($container)))));

        $instance->setName('app:monitor-logs');
        $instance->setDescription('Monitor logs');

        return $instance;
    }
}
