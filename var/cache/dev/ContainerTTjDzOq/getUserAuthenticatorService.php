<?php

namespace ContainerTTjDzOq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUserAuthenticatorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Config\Security\UserAuthenticator' shared autowired service.
     *
     * @return \App\Config\Security\UserAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'UserAuthenticator.php';

        $a = ($container->services['lexik_jwt_authentication.jwt_manager'] ?? $container->load('getLexikJwtAuthentication_JwtManagerService'));

        if (isset($container->privates['App\\Config\\Security\\UserAuthenticator'])) {
            return $container->privates['App\\Config\\Security\\UserAuthenticator'];
        }
        $b = ($container->privates['App\\Config\\Security\\UserProvider'] ?? $container->load('getUserProviderService'));

        if (isset($container->privates['App\\Config\\Security\\UserAuthenticator'])) {
            return $container->privates['App\\Config\\Security\\UserAuthenticator'];
        }
        $c = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['App\\Config\\Security\\UserAuthenticator'])) {
            return $container->privates['App\\Config\\Security\\UserAuthenticator'];
        }

        return $container->privates['App\\Config\\Security\\UserAuthenticator'] = new \App\Config\Security\UserAuthenticator($a, $b, ($container->privates['security.user_password_hasher'] ?? $container->load('getSecurity_UserPasswordHasherService')), $c);
    }
}
